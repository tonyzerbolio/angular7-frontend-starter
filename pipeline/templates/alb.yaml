---
Description: AngularJS Application Load Balancer
Parameters:
  DeployEnv:
    Description: Deployment Environment
    Type: String
  Subnets:
    Description: A list of subnet IDs to associate with the load balancer.
    Type: CommaDelimitedList
  VpcId:
    Description: The physical ID of the VPC
    Type: 'AWS::EC2::VPC::Id'
  HostedZoneName:
    Description: The Name of the DNS zone
    Type: 'String'
Resources:
  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: LoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Tags:
        - Key: Project
          Value: "Demo"
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: False
      Scheme: internet-facing
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      Subnets:
        Ref: Subnets
  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Tags:
        - Key: Project
          Value: "Demo"
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: /#/
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VpcId
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Load balancer security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VpcId
  LoadBalancerCname:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Join ["", [ !Ref HostedZoneName, "." ]]
      Comment: DNS name for UI
      Name: !Join [".", [ !Ref DeployEnv, angularjs_app, !Ref HostedZoneName ]]
      Type: CNAME
      TTL: '300'
      ResourceRecords:
      - !GetAtt LoadBalancer.DNSName
Outputs:
  LoadBalancerDNSName:
    Description: Load Balancer Name
    Value: !GetAtt LoadBalancer.DNSName
  LoadBalancerTargetGroupName:
    Value:
      Ref: LoadBalancerTargetGroup
